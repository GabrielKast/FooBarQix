#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable -sname FooBarQix

-export ([qix/1]).

-export ([test/0]).


%% Lancer les tests
main(["test"]) -> ok  = test(),
                  io:fwrite("tests ok\n");

%% Tous les résultats de.. à...
main([From_s, To_s]) ->
    try
        From = list_to_integer(From_s),
        To = list_to_integer(To_s),
        %% Assert that...
        true = (From=<To 
                andalso is_valid_param(From) 
                andalso is_valid_param(To) ),
        %% Afficher le résultat
        [ io:fwrite("~p ~s~n", [N, qix(N)]) 
          || N <- lists:seq(From, To) ]
    catch _:_ -> usage()
    end;
%% Résultat pour un nombre
main([String]) ->
    try
        N = list_to_integer(String),
        %% Assert that...
        true = is_valid_param(N),
        Result = qix(N),
        io:format("~s\n", [Result])
    catch _:_ -> usage()
    end;
%% Main case
main(["usage"]) -> usage();
main(_) -> main(["1", "100"]).

usage() ->
    io:format("usage:\n"),
    io:format("foobar: voir tous les nombre de 1 à 100  \n"),
    io:format("foobar  <<integer>> : pour un nombre\n"),
    io:format("foobar  <<borne inférieure>> <<borne supérieure>> : pour une
série de nombres entre 1 et 100 \n"),
    io:format("foobar test : Pour passer la série de tests:  \n"),
    halt(1).

%% is_valid_param(N) when N>0 andalso N=<100 -> true;
is_valid_param(N) when N>0 -> true;
is_valid_param(_) ->false.

%%%%%%%%%%%%%%%%%%%%%%%%
%% Fin de la plomberie
%%%%%%%%%%%%%%%%%%%%%%%%
%% Début du code métier
%%%%%%%%%%%%%%%%%%%%%%%%


qix(N) when is_integer(N) -> 

    Dividers = [sayitloud(ImBlackAmImProud) || ImBlackAmImProud <- cifers(), 
                                               N rem ImBlackAmImProud =:= 0 ],
    Transformers = [sayitloud(SweetJane) || Char <- integer_to_list(N), 
                                       SweetJane <- cifers(),
                                       Char - $0 =:= SweetJane ],
    Result = case lists:flatten(Dividers++Transformers) of
                 [] -> integer_to_list(N);
                 Transformed -> Transformed
             end,
%%    io:fwrite("~p~n~p~n~p~n", [N, Computed, Result]),
    Result.

cifers() -> [ 3, 5, 7 ].
sayitloud(3)-> "Foo";
sayitloud(5) ->"Bar";
sayitloud(7) ->"Qix".

%%%%%%%%%%
%% Tests
%%%%%%%%%%
test()->
    "Foo" = qix(13),
    "FooBar" = qix(51),
    "FooQixQixQixQix" = qix(777),
    "FooFooFoo" = qix(33),
    "FooFoo" = qix(3),
    "4" = qix(4),
    "QixQix" = qix(7),
    "Foo" = qix(13),
    "FooBarBar" = qix(15),
    "FooFooFoo" = qix(33),
    "FooBar" = qix(51),
    "BarFoo" = qix(53),
    "64" = qix(64),
    "FooQix" = qix(21),
    ok.
    
    
     
