#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable -sname FooBarQix

-export ([qix/1]).

-export ([divide/2]).
-export ([transform/2]).
-export ([test/0]).

%% Lancer les tests
main(["test"]) -> ok  = test(),
                  io:fwrite("tests ok\n");

%% Tous les résultats de.. à...
main([From_s, To_s]) ->
    try
        From = list_to_integer(From_s),
        To = list_to_integer(To_s),
        %% Assert that...
        true = (From=<To 
                andalso is_valid_param(From) 
                andalso is_valid_param(To) ),
        %% Afficher le résultat
        [ io:fwrite("~p ~s~n", [N, qix(N)]) 
          || N <- lists:seq(From, To) ]
    catch _:_ -> usage()
    end;
%% Résultat pour un nombre
main([String]) ->
    try
        N = list_to_integer(String),
        %% Assert that...
        true = is_valid_param(N),
        Result = qix(N),
        io:format("~s\n", [Result])
    catch _:_ -> usage()
    end;
%% Main case
main(["usage"]) -> usage();
main(_) -> main(["1", "100"]).

usage() ->
    io:format("usage:\n"),
    io:format("foobar: voir tous les nombre de 1 à 100  \n"),
    io:format("foobar  <<integer>> : pour un nombre\n"),
    io:format("foobar  <<borne inférieure>> <<borne supérieure>> : pour une
série de nombres entre 1 et 100 \n"),
    io:format("foobar test : Pour passer la série de tests:  \n"),
    halt(1).

%% is_valid_param(N) when N>0 andalso N=<100 -> true;
is_valid_param(N) when N>0 -> true;
is_valid_param(_) ->false.

%%%%%%%%%%%%%%%%%%%%%%%%
%% Fin de la plomberie
%%%%%%%%%%%%%%%%%%%%%%%%
%% Début du code métier
%%%%%%%%%%%%%%%%%%%%%%%%

qix(N) when is_integer(N) -> 
    Cifers = lists:reverse([ 3, 5, 7 ]),
    do_qix (N, Cifers, "").

do_qix(N, [], "") -> integer_to_list(N);
do_qix(_, [], Result) -> lists:flatten (Result);
do_qix(N, [Cifer|Rest], Accumulator) ->
    Computed = divide(N, Cifer) ++ transform(N, Cifer),
    New_accumulator = reduce_result(Computed, Accumulator),
    do_qix(N, Rest, New_accumulator).

reduce_result([], Result)-> Result;
reduce_result(Yell_it, Result)-> [Yell_it | Result].

transform(N, Cifer) when is_integer(N)-> transform(integer_to_list(N), Cifer);
transform(N, Cifer) -> [ sayitloud(Cifer) || Char <- N, Char - $0 =:=Cifer].

divide(JamesB, ImBlackAmImProud) when JamesB rem ImBlackAmImProud=:=0 -> 
    sayitloud(ImBlackAmImProud);
divide(_, _) -> []. 

sayitloud(3)-> "Foo";
sayitloud(5) ->"Bar";
sayitloud(7) ->"Qix".

%%%%%%%%%%
%% Tests
%%%%%%%%%%
test()->
    "Foo" = divide(3,3),
    "" = [],
    "Bar" = divide(5,5),
    "" = divide(13,3),
    "Foo" = divide(33,3),
    "Foo" = divide(777,3),
    "Qix" = divide(777,7),
    
    ["Foo", "Foo"] = transform(33,3),
    ["Qix", "Qix", "Qix"] = transform(777,7),

    "Foo" = qix(13),
    "FooQixQixQixQix" = qix(777),
    "FooFooFoo" = qix(33),
    ok.
    
    
     
